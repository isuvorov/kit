name: Release
on:
  push:
    branches:
      - master

env:
  NODE_VERSION: 20.5.1
  PNPM_VERSION: 8.7.5
  STAGE: prod
  VERSION: ${{ github.sha }}

  DOCKER_IMAGE_API: ${{ vars.DOCKER_REGISTRY }}/kit/kit-api:${{ github.sha }}
  DOCKER_IMAGE_WEB: ${{ vars.DOCKER_REGISTRY }}/kit/kit-web:${{ github.sha }}

  K8S_HOST: kit.lskjs.ru
  K8S_NAMESPACE: kit
  K8S_ENV_SECRET_NAME: prod-kit-env
  K8S_APP_NAME_API: kit-api
  K8S_APP_NAME_WEB: kit-web

jobs:
  prepare:
    runs-on: ubuntu-22.04
    steps:
      - name: GIT – Checkout
        uses: actions/checkout@v4
      - name: PNPM – Install
        uses: lskjs/action-pnpm@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
  build_api:
    needs: [prepare]
    runs-on: ubuntu-22.04
    steps:
      - name: GIT – Checkout
        uses: actions/checkout@v4
      - name: PNPM – Build shared libs
        uses: lskjs/action-pnpm@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          command: pnpm build:lib
      - name: PNPM – Release
        uses: lskjs/action-pnpm@v1
        with:
          working-directory: apps/api
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          command: pnpm release
      - name: Docker – Setup
        uses: docker/setup-buildx-action@v2
      - name: Docker - Login
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}
      - name: Docker – Build & Push
        uses: docker/build-push-action@v4
        with:
          context: apps/api
          push: true
          tags: ${{ env.DOCKER_IMAGE_API }}
          build-args: |
            VERSION=${{ env.VERSION }}
  build_web:
    needs: [prepare]
    runs-on: ubuntu-22.04
    steps:
      - name: GIT – Checkout
        uses: actions/checkout@v4
      - name: PNPM – Build shared libs
        uses: lskjs/action-pnpm@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          command: pnpm build:lib
      - name: PNPM – Release
        uses: lskjs/action-pnpm@v1
        with:
          working-directory: apps/web
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}
          command: pnpm release
      - name: Docker – Setup
        uses: docker/setup-buildx-action@v2
      - name: Docker - Login
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USER }}
          password: ${{ secrets.DOCKER_REGISTRY_PASS }}
      - name: Docker – Build & Push
        uses: docker/build-push-action@v4
        with:
          context: apps/web
          push: true
          tags: ${{ env.DOCKER_IMAGE_WEB }}
          build-args: |
            VERSION=${{ env.VERSION }}
  deploy_api:
    needs: [build_web, build_api]
    runs-on: ubuntu-22.04
    container: lskjs/kubectl
    steps:
      - uses: actions/checkout@v4
      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: Save env file
        uses: lskjs/action-secret-file@v1
        with:
          filename: envs/env_file
          content: ${{ secrets.PROD_ENV_FILE }}
          filename2: envs/env_js
          content2: ${{ secrets.PROD_ENV_JS }}
      - name: K8S – deploy
        run: |
          kubectl get ns ${{ env.K8S_NAMESPACE }} || kubectl create ns ${{ env.K8S_NAMESPACE }} && \
          kubectl create secret generic ${{ env.K8S_ENV_SECRET_NAME }} --from-file=./envs/env_file --from-file=./envs/env_js --save-config --dry-run=client -o yaml -n ${{ env.K8S_NAMESPACE }} | kubectl apply -f - -n ${{ env.K8S_NAMESPACE }} && \
          envsubst < ${{ env.K8S_MANIFEST }} | kubectl apply -f -
        env: 
          K8S_MANIFEST: apps/api/k8s.yaml
          K8S_APP_NAME: ${{ env.K8S_APP_NAME_API }}
          K8S_NAMESPACE: ${{ env.K8S_NAMESPACE }}
          K8S_ENV_SECRET_NAME: ${{ env.K8S_ENV_SECRET_NAME }}

          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE_API }}
          STAGE: ${{ env.STAGE }}
          VERSION: ${{ env.VERSION }}
  deploy_web:
    needs: [build_web, build_api]
    runs-on: ubuntu-22.04
    container: lskjs/kubectl
    steps:
      - uses: actions/checkout@v4
      - name: Set Kubernetes Context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG }}
      - name: Save env file
        uses: lskjs/action-secret-file@v1
        with:
          filename: envs/env_file
          content: ${{ secrets.PROD_ENV_FILE }}
          filename2: envs/env_js
          content2: ${{ secrets.PROD_ENV_JS }}
      - name: K8S – deploy
        run: |
          kubectl get ns ${{ env.K8S_NAMESPACE }} || kubectl create ns ${{ env.K8S_NAMESPACE }} && \
          kubectl create secret generic ${{ env.K8S_ENV_SECRET_NAME }} --from-file=./envs/env_file --from-file=./envs/env_js --save-config --dry-run=client -o yaml -n ${{ env.K8S_NAMESPACE }} | kubectl apply -f - -n ${{ env.K8S_NAMESPACE }} && \
          envsubst < ${{ env.K8S_MANIFEST }} | kubectl apply -f -
        env: 
          K8S_MANIFEST: apps/web/k8s.yaml
          K8S_APP_NAME: ${{ env.K8S_APP_NAME_WEB }}
          K8S_NAMESPACE: ${{ env.K8S_NAMESPACE }}
          K8S_ENV_SECRET_NAME: ${{ env.K8S_ENV_SECRET_NAME }}

          DOCKER_IMAGE: ${{ env.DOCKER_IMAGE_WEB }}
          STAGE: ${{ env.STAGE }}
          VERSION: ${{ env.VERSION }}